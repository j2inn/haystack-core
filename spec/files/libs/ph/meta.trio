//
// Copyright (c) 2011, Project-Haystack
// Licensed under the Academic Free License version 3.0
//
// History:
//   22 Feb 2011  Brian Frank  Creation
//    6 Jan 2019  Brian Frank  New design
//

--------------------------------------------------------------------------
def: ^accumulate
is: ^marker
doc:
  Accumulate the tag's value during [inheritance]`docHaystack::Normalization#inherit`
  and [defx]`docHaystack::Normalization#defx`.  Tags marked as accumulate
  are aggregated together during normalization and deduplicated.  This
  marker must only be used on tags which expect a list value.
--------------------------------------------------------------------------
def: ^baseUri
is: ^uri
tagOn: ^lib
doc: "Base URI for normalizing relative URIs"
--------------------------------------------------------------------------
def: ^children
is: ^list
of: ^dict
accumulate
doc:
  List of prototypes contained by this entity.
  See [Protos chapter]`docHaystack::Protos` for more details.
--------------------------------------------------------------------------
def: ^childrenFlatten
is: ^list
of: ^symbol
doc:
  List of aspects to flatten into children prototypes.
  See [Protos chapter]`docHaystack::Protos` for more details.
--------------------------------------------------------------------------
def: ^choice
is: ^marker
docTaxonomy
doc:
  Choice specifies an exclusive marker selection.
  See [Choices]`docHaystack::Choices` chapter.
--------------------------------------------------------------------------
def: ^computedFromReciprocal
is: ^marker
doc:
  Indicates a relationship that is computed from its reciprocal.
  Computed defs cannot be used as tags themselves.
--------------------------------------------------------------------------
def: ^def
is: ^symbol
doc:
  Create a new definition bound to the given symbol.
  See [Defs chapter]`docHaystack::Defs`.
--------------------------------------------------------------------------
def: ^defx
is: ^symbol
doc:
  Extends the given definition with additional meta tags.
  See [Normalization]`docHaystack::Normalization#defx`.
--------------------------------------------------------------------------
def: ^doc
is: ^str
tagOn: ^def
doc:
  Documentation in simplified flavor of markdown.  The first
  sentence up to the period is used as the summary.

  Specific formatting options:
  pre>
  // inline formatting
  *italic*           // italics font
  **bold**           // bold font
  'code'             // code or API term
  `point`            // hyperlink to def (code link)
  [text]`point`      // hyperlink with explicit link text
  ![alt]`image.png`  // image

  // unordered list
  - one
  - two
  - three

  // ordered list; use numbers or letters
  1. one
  2. two
  3. three
  <pre

  The main difference between markdown is that inline code uses single
  ticks and hyperlinks are annotated using the backtick.  Links may be:
    - absolute http/https URIs
    - def symbol such as "site" or "hot-water"
--------------------------------------------------------------------------
def: ^docAssociations
is: ^marker
doc: "Generate a section in the docs for this association."
--------------------------------------------------------------------------
def: ^docTaxonomy
is: ^marker
notInherited
doc:
  Generate a taxonomy tree for this term in the documentationindex.
  When applied to a def, then it will will be listed in the docs
  under the [taxonomies]`docHaystack::Docs#taxonomies` section.
--------------------------------------------------------------------------
def: ^enum
is: ^val
tagOn: ^def
doc:
  Defines an eumeration of string key names.  The range may also be applied
  to format a Bool ordered as "false,true".  The value of this tag may be
  formatted in one of five ways:
   - dict of dicts keyed by name and Dict values for meta such as 'doc' tag
   - comma separated names on one line
   - names separated by a "\n" newline character
   - markdown unordered list formatted as a series of "- name: description\n"
   - ref to a Xeto 'sys::Enum' spec

  Enum names *should* follow valid tag naming rules (start with lowercase
  ASCII letter and contain only ASCII letters and numbers).  However in
  cases where mapping directly to external enumerations enum names can
  contain arbitrary characters such as space.
--------------------------------------------------------------------------
def: ^feature
docTaxonomy
doc: "Feature namespace of definitions formatted as 'feature:name'"
--------------------------------------------------------------------------
def: ^lib
is: ^feature
doc:
  Library module of symbolic definitions.
  See `docHaystack::Namespaces#libs` chapter.
--------------------------------------------------------------------------
def: ^depends
is: ^list
of: ^ref
tagOn: ^lib
doc:
  List of this library's dependencies.  The dependent libs define the
  [lib namespace]`docHaystack::Namespaces#lib`. Also see
  [Normalization]`docHaystack::Normalization#resolve`.
--------------------------------------------------------------------------
def: ^mandatory
is: ^marker
tagOn: ^def
notInherited
doc:
  Requires that the marker be applied to dicts which use the marker's subtypes.
  This tag is typically applied to top-level entity tags such as 'equip'.
  For example if an instance is tagged with a subtype of 'equip' such
  as 'tank', then the instance must also include the 'equip' tag as a
  mandatory marker.
--------------------------------------------------------------------------
def: ^notInherited
is: ^marker
tagOn: ^def
doc:
  Marker applied to a def to indicate that is not inherited into
  subtype definitions.
--------------------------------------------------------------------------
def: ^openEnum
is: ^marker
doc:
  Apply to str enum tags where the enumeration range is open ended.
  User interfaces should support data entry for arbitrary strings, but
  also provide a dropdown for the predefined enumeration.
--------------------------------------------------------------------------
def: ^transient
is: ^marker
tagOn: ^def
doc:
  Indicates a value tag which should not be persisted.  Transient
  values often change frequently and do not provide long term informational
  value. Typyically they are stored only in RAM and should not be stored
  to durable storage.
--------------------------------------------------------------------------
def: ^version
is: ^str
tagOn: ^lib
doc: "Version string formatted as decimal integers separated by a dot"
--------------------------------------------------------------------------
def: ^wikipedia
is: ^uri
tagOn: ^def
doc: "Hyperlink to the subject's page on Wikipedia"
--------------------------------------------------------------------------

